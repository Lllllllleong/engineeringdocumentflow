# ==============================================================================
#                 Deployable PDF Splitter Workflow
# ==============================================================================
# This workflow orchestrates the initial PDF splitting process. It is
# triggered by a file upload to GCS and calls a worker Cloud Function to
# perform the splitting and then triggers the main processing orchestrator.
# ==============================================================================

main:
  params: [event] # Receives the CloudEvent from the GCS trigger
  steps:
    - init:
        assign:
          - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - workflow_id: "document-processing-orchestrator"
          - workflow_location: "us-central1"
          # The URL of a function that contains the splitting logic from your Go code.
          - splitter_worker_url: ${sys.get_env("PDF_SPLITTER_WORKER_URL")}
          - gcs_bucket: ${event.data.bucket}
          - gcs_object: ${event.data.name}
          - default_retry_policy:
              predicate: ${http.default_retry_predicate}
              max_retries: 5
              backoff:
                initial_delay: 2
                multiplier: 2
        logging:
          severity: 'INFO'
          text: ${"Starting PDF splitter workflow for gs://" + gcs_bucket + "/" + gcs_object}

    - call_splitter_worker:
        try:
          call: http.post
          args:
            url: ${splitter_worker_url}
            auth:
              type: OIDC
            body:
              bucket: ${gcs_bucket}
              name: ${gcs_object}
            timeout: 540 # Timeout in seconds, matching the function timeout
          result: splitter_result
        except:
          as: e
          steps:
            - log_splitter_failure:
                logging:
                  severity: 'ERROR'
                  text: ${"Calling the PDF splitter worker function failed for " + gcs_object}
            - fail_execution:
                raise: ${e}

    - check_splitter_response:
        switch:
          - condition: ${splitter_result.body.status == "duplicate"}
            steps:
              - log_duplicate:
                  logging:
                    severity: 'INFO'
                    text: ${"Skipping duplicate file:" + gcs_object}
              - finish_duplicate:
                  return: 'Duplicate file detected. Workflow halted as expected.'
          - condition: ${splitter_result.body.status == "success"}
            next: trigger_main_orchestrator
        next: fail_on_bad_response

    - trigger_main_orchestrator:
        call: googleapis.workflows.v1.projects.locations.workflows.executions.create
        args:
          parent: ${"projects/" + project_id + "/locations/" + workflow_location + "/workflows/" + workflow_id}
          execution:
            argument: ${json.encode({"documentId:" splitter_result.body.documentId, "pageCount:" splitter_result.body.pageCount})}
        result: execution_result
        next: log_success

    - log_success:
        logging:
          severity: 'INFO'
          text: ${"Successfully triggered main orchestrator. Execution ID:" + execution_result.name}
        next: end

    - fail_on_bad_response:
        raise: ${"Splitter worker returned an unexpected status:" + splitter_result.body.status}

    - end:
        return: 'PDF Splitting and main workflow trigger completed.'
